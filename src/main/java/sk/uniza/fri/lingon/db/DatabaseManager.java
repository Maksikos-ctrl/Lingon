package sk.uniza.fri.lingon.db;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import java.io.File;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import sk.uniza.fri.lingon.core.VysledokTestu;
import sk.uniza.fri.lingon.pouzivatel.Pouzivatel;

/**
 * Spr√°vca datab√°zy H2 pre ukladanie hist√≥rie testov.
 * KOMPATIBILN√Å VERZIA PRE SYNCHRONIZ√ÅCIU!
 */
public class DatabaseManager {

    // üîß JEDNODUCH√Å H2 KONFIGUR√ÅCIA BEZ PROBL√âMOV
    private static final String SHARED_DB_PATH = getSyncedDatabasePath();
    private static final String DB_URL = "jdbc:h2:" + SHARED_DB_PATH + "lingon_historia";
    private static final String DB_USER = "sa";
    private static final String DB_PASSWORD = "";

    private static HikariDataSource dataSource;

    static {
        try {
            System.out.println("üîó Desktop DB Path: " + DB_URL);
            setupDataSource();
            vytvorTabulky();
        } catch (Exception e) {
            System.err.println("‚ùå Chyba pri inicializ√°cii H2 Database: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * üîÑ Z√≠ska synchronizovan√Ω path k datab√°ze
     */
    private static String getSyncedDatabasePath() {
        // Pou≈æ√≠vame Documents folder pre jednoduchos≈•
        String externalPath = System.getProperty("user.home") + "/Documents/LingonQuiz/";

        // Vytvor√≠me prieƒçinok ak neexistuje
        File dir = new File(externalPath);
        if (!dir.exists()) {
            boolean created = dir.mkdirs();
            if (created) {
                System.out.println("‚úÖ Vytvoren√Ω synchronizaƒçn√Ω prieƒçinok: " + externalPath);
            } else {
                System.out.println("‚ö†Ô∏è Nepodarilo sa vytvori≈• prieƒçinok: " + externalPath);
                // Fallback na aktu√°lny prieƒçinok
                externalPath = "./";
            }
        }

        return externalPath;
    }

    /**
     * JEDNODUCH√Å konfigur√°cia H2 Database
     */
    private static void setupDataSource() {
        HikariConfig config = new HikariConfig();
        config.setJdbcUrl(DB_URL);
        config.setUsername(DB_USER);
        config.setPassword(DB_PASSWORD);
        config.setDriverClassName("org.h2.Driver");

        // Z√ÅKLADN√â nastavenia bez probl√©mov√Ωch opci√≠
        config.setMaximumPoolSize(3);
        config.setMinimumIdle(1);
        config.setConnectionTimeout(30000);
        config.setIdleTimeout(600000);
        config.setMaxLifetime(1800000);

        dataSource = new HikariDataSource(config);
        System.out.println("‚úÖ H2 Database connection pool inicializovan√Ω (KOMPATIBILN√ù)");
    }

    /**
     * Vytvor√≠ tabuƒæky ak neexistuj√∫.
     */
    private static void vytvorTabulky() throws SQLException {
        // ROVNAK√Å ≈†TRUKT√öRA AKO V MOBILE!
        String sqlHistoria = """
            CREATE TABLE IF NOT EXISTS historia (
                id IDENTITY PRIMARY KEY,
                pouzivatel_email VARCHAR(255) NOT NULL,
                kategoria_nazov VARCHAR(255) NOT NULL,
                cas_ukoncenia TIMESTAMP NOT NULL,
                pocet_otazok INTEGER NOT NULL,
                spravne_odpovede INTEGER NOT NULL,
                nespravne_odpovede INTEGER NOT NULL,
                uspesnost DECIMAL(5,2) NOT NULL
            )""";

        String sqlPouzivatelia = """
            CREATE TABLE IF NOT EXISTS pouzivatelia (
                id IDENTITY PRIMARY KEY,
                meno VARCHAR(255) NOT NULL,
                email VARCHAR(255) NOT NULL UNIQUE,
                celkove_xp INTEGER DEFAULT 0,
                spravne_odpovede INTEGER DEFAULT 0,
                nespravne_odpovede INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )""";

        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement()) {

            stmt.execute(sqlHistoria);
            System.out.println("‚úÖ Tabuƒæka 'historia' pripraven√°");

            stmt.execute(sqlPouzivatelia);
            System.out.println("‚úÖ Tabuƒæka 'pouzivatelia' pripraven√°");

            // Vytvor√≠me indexy pre lep≈°√≠ v√Ωkon
            vytvorIndexy(stmt);

        } catch (SQLException e) {
            System.err.println("‚ùå Chyba pri vytv√°ran√≠ tabuliek: " + e.getMessage());
            throw e;
        }
    }

    /**
     * Vytvor√≠ indexy pre optim√°lny v√Ωkon
     */
    private static void vytvorIndexy(Statement stmt) throws SQLException {
        try {
            stmt.execute("CREATE INDEX IF NOT EXISTS idx_historia_email ON historia(pouzivatel_email)");
            stmt.execute("CREATE INDEX IF NOT EXISTS idx_historia_cas ON historia(cas_ukoncenia)");
            stmt.execute("CREATE INDEX IF NOT EXISTS idx_pouzivatelia_email ON pouzivatelia(email)");
            System.out.println("‚úÖ Indexy vytvoren√©");
        } catch (SQLException e) {
            System.out.println("üí° Indexy u≈æ existuj√∫ alebo nie s√∫ podporovan√©");
        }
    }

    /**
     * Z√≠ska spojenie s H2 datab√°zou
     */
    private static Connection getConnection() throws SQLException {
        if (dataSource == null) {
            throw new SQLException("H2 connection pool nie je inicializovan√Ω");
        }
        return dataSource.getConnection();
    }

    /**
     * Vytvor√≠ a nakonfiguruje objekt VysledokTestu s dan√Ωmi parametrami.
     */
    private static VysledokTestu vytvorVysledok(String kategoriaId, String kategoriaNazov,
                                                int pocetOtazok, String pouzivatelEmail,
                                                int spravne, int nespravne) {
        VysledokTestu vysledok = new VysledokTestu(kategoriaId, kategoriaNazov, pocetOtazok);
        vysledok.setPouzivatelEmail(pouzivatelEmail);

        for (int i = 0; i < spravne; i++) {
            vysledok.pridajSpravnuOdpoved();
        }
        for (int i = 0; i < nespravne; i++) {
            vysledok.pridajNespravnuOdpoved();
        }

        return vysledok;
    }

    /**
     * Ulo≈æ√≠ v√Ωsledok testu do datab√°zy.
     */
    public static void ulozVysledok(VysledokTestu vysledok) {
        String sql = """
            INSERT INTO historia (pouzivatel_email, kategoria_nazov, cas_ukoncenia, 
                                 pocet_otazok, spravne_odpovede, nespravne_odpovede, uspesnost) 
            VALUES (?, ?, ?, ?, ?, ?, ?)""";

        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, vysledok.getPouzivatelEmail());
            pstmt.setString(2, vysledok.getKategoriaNazov());
            pstmt.setObject(3, vysledok.getCasUkoncenia());
            pstmt.setInt(4, vysledok.getPocetOtazok());
            pstmt.setInt(5, vysledok.getSpravneOdpovede());
            pstmt.setInt(6, vysledok.getNespravneOdpovede());
            pstmt.setDouble(7, vysledok.getUspesnost());

            pstmt.executeUpdate();
            System.out.println("‚úÖ V√Ωsledok ulo≈æen√Ω do SYNCHRONIZOVANEJ H2 Database: " + vysledok.getPouzivatelEmail());

            // Aktualizujeme pou≈æ√≠vateƒæa po teste
            aktualizujPouzivatelaPoTeste(vysledok);

        } catch (SQLException e) {
            System.err.println("‚ùå Chyba pri ukladan√≠: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * üîÑ Aktualizuje XP pou≈æ√≠vateƒæa po teste
     */
    private static void aktualizujPouzivatelaPoTeste(VysledokTestu vysledok) {
        try {
            Pouzivatel pouzivatel = nacitajPouzivatela(vysledok.getPouzivatelEmail());
            if (pouzivatel != null) {
                // Prid√°me XP za test
                int bonusXP = vysledok.getSpravneOdpovede() * 10; // 10 XP za spr√°vnu odpoveƒè
                pouzivatel.setCelkoveXP(pouzivatel.getCelkoveXP() + bonusXP);
                pouzivatel.setSpravneOdpovede(pouzivatel.getSpravneOdpovede() + vysledok.getSpravneOdpovede());
                pouzivatel.setNespravneOdpovede(pouzivatel.getNespravneOdpovede() + vysledok.getNespravneOdpovede());

                aktualizujPouzivatela(pouzivatel);
                System.out.println("üîÑ Pou≈æ√≠vateƒæ synchronizovan√Ω: " + pouzivatel.getEmail() + " (+" + bonusXP + " XP)");
            }
        } catch (Exception e) {
            System.err.println("‚ùå Chyba pri aktualiz√°cii pou≈æ√≠vateƒæa: " + e.getMessage());
        }
    }

    /**
     * Naƒç√≠ta hist√≥riu testov pre konkr√©tneho pou≈æ√≠vateƒæa.
     */
    public static List<VysledokTestu> nacitajHistoriuPouzivatela(String email) {
        List<VysledokTestu> historia = new ArrayList<>();
        String sql = "SELECT * FROM historia WHERE pouzivatel_email = ? ORDER BY id DESC";

        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, email);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                String kategoriaNazov = rs.getString("kategoria_nazov");
                LocalDateTime casUkoncenia = rs.getTimestamp("cas_ukoncenia").toLocalDateTime();
                int pocetOtazok = rs.getInt("pocet_otazok");
                int spravne = rs.getInt("spravne_odpovede");
                int nespravne = rs.getInt("nespravne_odpovede");

                VysledokTestu vysledok = vytvorVysledok("", kategoriaNazov, pocetOtazok,
                        email, spravne, nespravne);
                setCasUkoncenia(vysledok, casUkoncenia);
                historia.add(vysledok);
            }

            System.out.println("‚úÖ Naƒç√≠tan√© " + historia.size() + " z√°znamov pre: " + email);

        } catch (SQLException e) {
            System.err.println("‚ùå Chyba pri ƒç√≠tan√≠ hist√≥rie: " + e.getMessage());
        }

        return historia;
    }

    /**
     * Pomocn√° met√≥da na nastavenie ƒçasu ukonƒçenia.
     */
    private static void setCasUkoncenia(VysledokTestu vysledok, LocalDateTime cas) {
        try {
            Field field = VysledokTestu.class.getDeclaredField("casUkoncenia");
            field.setAccessible(true);
            field.set(vysledok, cas);

            field = VysledokTestu.class.getDeclaredField("uspesnost");
            field.setAccessible(true);
            field.set(vysledok, (double)vysledok.getSpravneOdpovede() / vysledok.getPocetOtazok() * 100);
        } catch (Exception e) {
            System.err.println("Chyba pri nastavovan√≠ ƒçasu ukonƒçenia: " + e.getMessage());
        }
    }

    /**
     * Naƒç√≠ta v≈°etku hist√≥riu testov.
     */
    public static List<VysledokTestu> nacitajHistoriu() {
        List<VysledokTestu> historia = new ArrayList<>();
        String sql = "SELECT * FROM historia ORDER BY id DESC";

        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                String kategoriaNazov = rs.getString("kategoria_nazov");
                int pocetOtazok = rs.getInt("pocet_otazok");
                int spravne = rs.getInt("spravne_odpovede");
                int nespravne = rs.getInt("nespravne_odpovede");
                String pouzivatelEmail = rs.getString("pouzivatel_email");
                LocalDateTime casUkoncenia = rs.getTimestamp("cas_ukoncenia").toLocalDateTime();

                VysledokTestu vysledok = vytvorVysledok("", kategoriaNazov, pocetOtazok,
                        pouzivatelEmail, spravne, nespravne);
                setCasUkoncenia(vysledok, casUkoncenia);
                historia.add(vysledok);
            }

            System.out.println("‚úÖ Naƒç√≠tan√© " + historia.size() + " z√°znamov z H2 Database");

        } catch (SQLException e) {
            System.err.println("‚ùå Chyba pri ƒç√≠tan√≠ z datab√°zy: " + e.getMessage());
        }

        return historia;
    }

    /**
     * Vyma≈æe hist√≥riu testov konkr√©tneho pou≈æ√≠vateƒæa.
     */
    public static void vymazHistoriuPouzivatela(String email) {
        String sql = "DELETE FROM historia WHERE pouzivatel_email = ?";

        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, email);
            int pocet = pstmt.executeUpdate();
            System.out.println("‚úÖ Hist√≥ria vymazan√° pre: " + email + " (" + pocet + " z√°znamov)");

        } catch (SQLException e) {
            System.err.println("‚ùå Chyba pri mazan√≠ hist√≥rie: " + e.getMessage());
        }
    }

    /**
     * Vyma≈æe v≈°etky z√°znamy z hist√≥rie.
     */
    public static void vymazHistoriu() {
        String sql = "DELETE FROM historia";

        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement()) {

            stmt.executeUpdate(sql);
            System.out.println("‚úÖ Hist√≥ria vymazan√° z H2 Database");

        } catch (SQLException e) {
            System.err.println("‚ùå Chyba pri mazan√≠ hist√≥rie: " + e.getMessage());
        }
    }

    /**
     * Kontroluje, ƒçi pou≈æ√≠vateƒæ s dan√Ωm emailom existuje v datab√°ze.
     */
    public static boolean existujePouzivatel(String email) {
        String sql = "SELECT COUNT(*) FROM pouzivatelia WHERE email = ?";

        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, email);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Chyba pri kontrole existencie pou≈æ√≠vateƒæa: " + e.getMessage());
        }

        return false;
    }

    /**
     * Ulo≈æ√≠ pou≈æ√≠vateƒæa do datab√°zy.
     */
    public static boolean ulozPouzivatela(Pouzivatel pouzivatel) {
        String sql = """
            INSERT INTO pouzivatelia (meno, email, celkove_xp, spravne_odpovede, nespravne_odpovede) 
            VALUES (?, ?, ?, ?, ?)""";

        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, pouzivatel.getMeno());
            pstmt.setString(2, pouzivatel.getEmail());
            pstmt.setInt(3, pouzivatel.getCelkoveXP());
            pstmt.setInt(4, pouzivatel.getSpravneOdpovede());
            pstmt.setInt(5, pouzivatel.getNespravneOdpovede());

            pstmt.executeUpdate();
            System.out.println("‚úÖ Pou≈æ√≠vateƒæ ulo≈æen√Ω do H2 Database: " + pouzivatel.getEmail());
            return true;

        } catch (SQLException e) {
            System.err.println("‚ùå Chyba pri ukladan√≠ pou≈æ√≠vateƒæa: " + e.getMessage());
            return false;
        }
    }

    /**
     * Naƒç√≠ta pou≈æ√≠vateƒæa z datab√°zy podƒæa emailu.
     */
    public static Pouzivatel nacitajPouzivatela(String email) {
        String sql = "SELECT * FROM pouzivatelia WHERE email = ?";

        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, email);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                String meno = rs.getString("meno");
                int celkoveXP = rs.getInt("celkove_xp");
                int spravneOdpovede = rs.getInt("spravne_odpovede");
                int nespravneOdpovede = rs.getInt("nespravne_odpovede");

                Pouzivatel pouzivatel = new Pouzivatel(meno, email);
                pouzivatel.setCelkoveXP(celkoveXP);
                pouzivatel.setSpravneOdpovede(spravneOdpovede);
                pouzivatel.setNespravneOdpovede(nespravneOdpovede);

                System.out.println("‚úÖ Pou≈æ√≠vateƒæ naƒç√≠tan√Ω z H2 Database: " + email);
                return pouzivatel;
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Chyba pri naƒç√≠tan√≠ pou≈æ√≠vateƒæa: " + e.getMessage());
        }

        System.out.println("‚ö†Ô∏è Pou≈æ√≠vateƒæ s emailom " + email + " nebol n√°jden√Ω");
        return null;
    }

    /**
     * Aktualizuje pou≈æ√≠vateƒæa v datab√°ze.
     */
    public static boolean aktualizujPouzivatela(Pouzivatel pouzivatel) {
        String sql = """
            UPDATE pouzivatelia 
            SET meno = ?, celkove_xp = ?, spravne_odpovede = ?, nespravne_odpovede = ? 
            WHERE email = ?""";

        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, pouzivatel.getMeno());
            pstmt.setInt(2, pouzivatel.getCelkoveXP());
            pstmt.setInt(3, pouzivatel.getSpravneOdpovede());
            pstmt.setInt(4, pouzivatel.getNespravneOdpovede());
            pstmt.setString(5, pouzivatel.getEmail());

            int affectedRows = pstmt.executeUpdate();
            System.out.println("‚úÖ Pou≈æ√≠vateƒæ aktualizovan√Ω v H2 Database: " + pouzivatel.getEmail());
            return affectedRows > 0;

        } catch (SQLException e) {
            System.err.println("‚ùå Chyba pri aktualiz√°cii pou≈æ√≠vateƒæa: " + e.getMessage());
            return false;
        }
    }

    /**
     * Zatvor√≠ v≈°etky datab√°zov√© spojenia pri ukonƒçen√≠ aplik√°cie
     */
    public static void shutdown() {
        if (dataSource != null) {
            dataSource.close();
            System.out.println("üîí H2 Database connection pool zatvoren√Ω");
        }
    }
}