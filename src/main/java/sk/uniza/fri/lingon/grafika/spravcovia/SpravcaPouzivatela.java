package sk.uniza.fri.lingon.grafika.spravcovia;

import sk.uniza.fri.lingon.db.DatabaseManager;
import sk.uniza.fri.lingon.grafika.hlavny.OvladacHlavnehoOkna;
import sk.uniza.fri.lingon.grafika.obrazovky.ProfilObrazovka;
import sk.uniza.fri.lingon.pouzivatel.Pouzivatel;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import java.awt.GridLayout;

/**
 * Spr√°vca pou≈æ√≠vateƒæov
 * Zodpovedn√Ω za spr√°vu pou≈æ√≠vateƒæov a ich profilov
 */
public class SpravcaPouzivatela {
    private final OvladacHlavnehoOkna ovladac;
    private Pouzivatel aktualnyPouzivatel;

    /**
     * Kon≈°truktor spr√°vcu pou≈æ√≠vateƒæov
     * @param ovladac Hlavn√Ω ovl√°daƒç aplik√°cie
     */
    public SpravcaPouzivatela(OvladacHlavnehoOkna ovladac) {
        this.ovladac = ovladac;
    }

    /**
     * Zobraz√≠ dial√≥g pre vytvorenie nov√©ho pou≈æ√≠vateƒæa
     */
    public void zobrazDialogNovehoPouzivatela() {
        JPanel panel = new JPanel(new GridLayout(0, 2, 10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        panel.add(new JLabel("Meno:"));
        JTextField menoField = new JTextField(20);
        panel.add(menoField);

        panel.add(new JLabel("Email:"));
        JTextField emailField = new JTextField(20);
        panel.add(emailField);

        int vysledok = JOptionPane.showConfirmDialog(
                this.ovladac.getHlavneOkno(),
                panel,
                "Nov√Ω pou≈æ√≠vateƒæ",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE
        );

        if (vysledok == JOptionPane.OK_OPTION) {
            String meno = menoField.getText().trim();
            String email = emailField.getText().trim();

            // Valid√°cia
            if (meno.isEmpty() || email.isEmpty()) {
                JOptionPane.showMessageDialog(
                        this.ovladac.getHlavneOkno(),
                        "Pros√≠m, vypl≈àte meno a email.",
                        "Chyba",
                        JOptionPane.ERROR_MESSAGE
                );
                this.zobrazDialogNovehoPouzivatela();
                return;
            }

            // Kontrola form√°tu emailu
            if (!this.jeEmailValidy(email)) {
                JOptionPane.showMessageDialog(
                        this.ovladac.getHlavneOkno(),
                        "Zadajte platn√Ω email.",
                        "Chyba",
                        JOptionPane.ERROR_MESSAGE
                );
                this.zobrazDialogNovehoPouzivatela();
                return;
            }

            // ‚úÖ OPRAVEN√Å LOGIKA HƒΩADANIA/VYTV√ÅRANIA POU≈Ω√çVATEƒΩA
            System.out.println("üîç Hƒæad√°m pou≈æ√≠vateƒæa: " + email);

            Pouzivatel existujuciPouzivatel = DatabaseManager.nacitajPouzivatela(email);

            if (existujuciPouzivatel != null) {
                // Pou≈æ√≠vateƒæ existuje
                System.out.println("üë§ Pou≈æ√≠vateƒæ existuje: " + existujuciPouzivatel.getMeno() + " (XP: " + existujuciPouzivatel.getCelkoveXP() + ")");

                int odpoved = JOptionPane.showConfirmDialog(
                        this.ovladac.getHlavneOkno(),
                        "Pou≈æ√≠vateƒæ s t√Ωmto emailom u≈æ existuje.\nChcete sa prihl√°si≈• ako " +
                                existujuciPouzivatel.getMeno() + "?",
                        "Pou≈æ√≠vateƒæ existuje",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE
                );

                if (odpoved == JOptionPane.YES_OPTION) {
                    this.aktualnyPouzivatel = existujuciPouzivatel;
                    System.out.println("‚úÖ Pou≈æ√≠vateƒæ prihl√°sen√Ω: " + this.aktualnyPouzivatel.getEmail());
                    this.ovladac.zobrazHlavneMenu();
                } else {
                    this.zobrazDialogNovehoPouzivatela();
                }
            } else {
                // ‚úÖ VYTVORENIE NOV√âHO POU≈Ω√çVATEƒΩA S LEP≈†√çM ERROR HANDLING
                System.out.println("üë§ Vytv√°ram nov√©ho pou≈æ√≠vateƒæa: " + meno + " (" + email + ")");

                this.aktualnyPouzivatel = new Pouzivatel(meno, email);
                System.out.println("üîß DEBUG: Calling DatabaseManager.ulozPouzivatela...");
                boolean ulozenyDoH2 = DatabaseManager.ulozPouzivatela(this.aktualnyPouzivatel);

                if (ulozenyDoH2) {
                    System.out.println("‚úÖ Nov√Ω pou≈æ√≠vateƒæ vytvoren√Ω a ulo≈æen√Ω: " + email);

                    System.out.println("üîß DEBUG: Waiting for Firebase sync to complete...");

                    // Kr√°tka pauza pre Firebase sync
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }

                    System.out.println("üîß DEBUG: Verifying Firebase sync...");
                    // Overenie ≈æe sa pou≈æ√≠vateƒæ naƒç√≠tal spr√°vne (vr√°tane Firebase)
                    Pouzivatel overenyPouzivatel = DatabaseManager.nacitajPouzivatela(email);
                    if (overenyPouzivatel != null) {
                        this.aktualnyPouzivatel = overenyPouzivatel;
                        System.out.println("‚úÖ Pou≈æ√≠vateƒæ overen√Ω a naƒç√≠tan√Ω: " + email);
                    }

                    this.ovladac.zobrazHlavneMenu();
                } else {
                    System.err.println("‚ùå Nepodarilo sa ulo≈æi≈• pou≈æ√≠vateƒæa do datab√°zy");
                    JOptionPane.showMessageDialog(
                            this.ovladac.getHlavneOkno(),
                            "Nepodarilo sa vytvori≈• nov√©ho pou≈æ√≠vateƒæa.\nSk√∫ste to znova.",
                            "Chyba datab√°zy",
                            JOptionPane.ERROR_MESSAGE
                    );
                    this.zobrazDialogNovehoPouzivatela();
                }
            }
        }
    }

    /**
     * Kontroluje, ƒçi je email validn√Ω
     * @param email Email na kontrolu
     * @return true ak je email validn√Ω, inak false
     */
    private boolean jeEmailValidy(String email) {
        String emailRegex = "^[A-Za-z0-9+_.-]+@(.+)$";
        return email.matches(emailRegex);
    }

    /**
     * Zobraz√≠ profil pou≈æ√≠vateƒæa
     */
    public void zobrazProfilPouzivatela() {
        ProfilObrazovka profilObrazovka = new ProfilObrazovka(this.ovladac, this.aktualnyPouzivatel);
        profilObrazovka.zobraz();
    }

    /**
     * üîÑ Obnov√≠ aktu√°lneho pou≈æ√≠vateƒæa z datab√°zy (po testoch, aktualiz√°ci√°ch)
     */
    public void obnovAktualnehoPozivatela() {
        if (this.aktualnyPouzivatel != null) {
            String email = this.aktualnyPouzivatel.getEmail();
            System.out.println("üîÑ Obnovovanie pou≈æ√≠vateƒæa: " + email);

            Pouzivatel obnovenyPouzivatel = DatabaseManager.nacitajPouzivatela(email);

            if (obnovenyPouzivatel != null) {
                int stareXP = this.aktualnyPouzivatel.getCelkoveXP();
                int noveXP = obnovenyPouzivatel.getCelkoveXP();

                this.aktualnyPouzivatel = obnovenyPouzivatel;

                System.out.println("üîÑ UI pou≈æ√≠vateƒæ obnoven√Ω: " + email +
                        " (XP: " + stareXP + " ‚Üí " + noveXP + ")");

                // Debug inform√°cie
                System.out.println("üìä Aktu√°lny stav pou≈æ√≠vateƒæa:");
                System.out.println("   - Meno: " + this.aktualnyPouzivatel.getMeno());
                System.out.println("   - Email: " + this.aktualnyPouzivatel.getEmail());
                System.out.println("   - XP: " + this.aktualnyPouzivatel.getCelkoveXP());
                System.out.println("   - Spr√°vne: " + this.aktualnyPouzivatel.getSpravneOdpovede());
                System.out.println("   - Nespr√°vne: " + this.aktualnyPouzivatel.getNespravneOdpovede());
            } else {
                System.err.println("‚ùå Nepodarilo sa obnovi≈• pou≈æ√≠vateƒæa: " + email);
            }
        }
    }

    /**
     * Getter pre aktu√°lneho pou≈æ√≠vateƒæa
     * @return Aktu√°lny pou≈æ√≠vateƒæ
     */
    public Pouzivatel getAktualnyPouzivatel() {
        return this.aktualnyPouzivatel;
    }
}